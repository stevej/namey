h1.  Writing Production Servers in Scala


Assumes some basic Scala knowledge.

Assumes you're writing Scala network-based servers.

Wrote a companion project that handles SMTP traffic called MailSlot to
illustrate concepts.

h3. You make what you measure.

Pick a measurement tool: Cacti, Ganglia, Munin. Learn it, use it.

Build a dashboard
-insert low rez screenshot of NameSearch dashboard-
Things to measure:
* Inbound QPS
* Outbound QPS
* Memory use
* Uptime
* Latency per request
* If talking to other network services, measure their latency
* Aggregate latency should be used if single latency metrics are
too expensive. (per 1000 requests, etc)

h3. Dashboards

Are not static
* grow as you learn to look for new things
* shrink as you learn what isn't helpful

h3. Track stats

We wrote a package called scala-stats
hosted on github
http://github.com/stevej/scala-stats

Also does w3c logging

h3. Counter

Increment by one or more.

Creating it
 val bytesWritten = new Counter

Using it
  MailStats.bytesWritten.incr(buffer.capacity)

h3. Time

Creating it
val mailRouterLatency = new Timer

Using it
  MailStats.mailRouterLatency.time[Unit] { router(EmailBuilder(bytes)) }


h3. Reporting

Two Options:
1) W3C Logs
2) STATS network call

h3. W3C Log

Standard format
Crunch w3c logs
Insert into measurement tools

h3. STATS network call

Already listening on a port with a text-based protocol
Respond to a STATS call

Example response

mailResponseLatencyAvg 15
mailResponseLatencyMin 7
mailResponseLatencyMax 30
uptime 934


h3. Getting data into your dashboards

* Prefer a text-based protocol or logfile for stats
* Don't want to fumble with your fancy toolchain
* Logfiles can be easily crunched with awk

MailSlot comes with a ruby script that, given a host, portnumber, and
passkey, will print out the stats for a single MailSlot instance.

h3. Configuration management

We wrote, use, and recommend Configgy.

{{{
<log>
  filename = "/var/log/mailslot/mailslot.log"
  console = "true"
  roll = "daily"
  level = "debug"
</log>
hostname = "mail.twitter.com"
port = 25
passkey = "asdf"
}}}


h3. Configgy Structure

A different conf file for each environment
 * test.conf
 * staging.conf
 * production.conf

h3. Logging

Configgy comes with a nice Scala-ified wrapper around java.util.logger
API

{{{
log.debug("End of session %d", sessionId)
}}}

h3. Load Test

For HTTP, there are lots of tools: JMeter, ab, Apache Flood, Tsung.
Varying feature sets. For HTTP, we start with ab and move
onto JMeter.

* For MailSlot (SMTP)
  * Wrote basic SMTP load test in Ruby
  * Sent 1000 emails
  * Found several bugs
  * Sweet!

h3. Stress Test

Learn the corner cases of performance for your server.

* For MailSlot
  * 1 connection, 1000 emails
  * 1000 connections, 1 email each
  * 1000 connections, 999 fast, 1 slow
* Findings
  * Forgot to tune ulimit!
  * Needed to switch on -server VM
  * other generic JVM tuning

h3. Stress Test Things to Watch

  * top
  * iostat to see if you're causing any surprise disk accesses
  * If you want to get nuts, can use dtrace to track this
  * Turn down logging levels, redirect to /dev/null
  * Turn on hprof profiling for one run, see if you did anything stupid

After knowing some basic facts about how your server performs under
expected load, a small production launch is in order.

h3. Shadow Launch

* Tee production traffic into your new system
* Ensure that your new jankiness can't destabilize your service
* See how your system performs under peak load
* Learn your blind spots
* Improve your dashboard

h3. Un-shadow

Start using your system for it's intended purpose
Not all at once
1%, 10%, 50%, 100% is a reasonable turn-up rate.


h3. GC tuning

Learn the difference between Latency and Throughput collectors
Use verbose gc log statements
 - How often are you collecting
 - Is garbage moving into the later generations?
 - Tune your sizes appropriately

h3. Useful tools

jstack - see what your threads are doing
  kill -3 can also give you this information
jmap - see how memory is allocated

h3. Scala Lessons

Be sure to tune your actors.maxPoolSize if you're using Actors
We use the number of current cores * 2

null can be useful in tight loops
null checks nearly free in the JVM
Not idiomatic, prefer Option in your public API

h3. Final Notes

* Naggati is fun
* Kestrel - our speedy message queue
* MailSlot - my fake mail server

Was this talk old hat to you?
Consider joining Twitter!
http://twitter.com/jobs

